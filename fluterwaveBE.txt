Sure, let's create a basic Node.js Express backend using Mongoose and MongoDB. We'll define endpoints for creating, reading, updating, and deleting (CRUD) operations for a `Wallet` entity. 

### Step 1: Set Up the Project

First, let's set up the project structure and install necessary dependencies:

```bash
mkdir flutterwave-wallet
cd flutterwave-wallet
npm init -y
npm install express mongoose body-parser cors
npm install --save-dev typescript @types/node @types/express @types/mongoose
```

Create a `tsconfig.json` file to configure TypeScript:

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
```

### Step 2: Define the Wallet Model

Create a `src/models/wallet.ts` file:

```typescript
import mongoose, { Document, Schema } from 'mongoose';

interface ITransaction {
    transactionId: string;
    type: 'deposit' | 'withdrawal' | 'transfer';
    amount: number;
    currency: string;
    date: Date;
    status: 'pending' | 'completed' | 'failed';
    description?: string;
}

interface ILinkedAccount {
    accountId: string;
    accountType: 'bank' | 'card';
    accountNumber: string;
    bankName?: string;
    cardType?: string;
    cardLastFourDigits?: string;
}

interface ISecuritySettings {
    pin: string;
    twoFactorEnabled: boolean;
    twoFactorMethod?: 'sms' | 'email' | 'authenticator';
}

interface IWalletLimits {
    dailyLimit: number;
    monthlyLimit: number;
}

interface IWalletFees {
    transactionFee: number;
    withdrawalFee: number;
}

interface INotificationSettings {
    emailNotifications: boolean;
    smsNotifications: boolean;
    pushNotifications: boolean;
}

interface IBeneficiary {
    beneficiaryId: string;
    name: string;
    accountNumber: string;
    bankName: string;
    addedAt: Date;
}

interface IWallet extends Document {
    walletId: string;
    userId: string;
    balance: number;
    currency: string;
    transactionHistory: ITransaction[];
    status: 'active' | 'inactive' | 'suspended';
    createdAt: Date;
    updatedAt: Date;
    walletType: 'personal' | 'business';
    linkedAccounts: ILinkedAccount[];
    securitySettings: ISecuritySettings;
    limits: IWalletLimits;
    fees: IWalletFees;
    notifications: INotificationSettings;
    beneficiaries: IBeneficiary[];
}

const WalletSchema: Schema = new Schema({
    walletId: { type: String, required: true },
    userId: { type: String, required: true },
    balance: { type: Number, required: true },
    currency: { type: String, required: true },
    transactionHistory: { type: [Object], required: true },
    status: { type: String, required: true },
    createdAt: { type: Date, required: true },
    updatedAt: { type: Date, required: true },
    walletType: { type: String, required: true },
    linkedAccounts: { type: [Object], required: true },
    securitySettings: { type: Object, required: true },
    limits: { type: Object, required: true },
    fees: { type: Object, required: true },
    notifications: { type: Object, required: true },
    beneficiaries: { type: [Object], required: true },
});

const Wallet = mongoose.model<IWallet>('Wallet', WalletSchema);

export default Wallet;
```

### Step 3: Set Up Express Server

Create a `src/server.ts` file:

```typescript
import express from 'express';
import mongoose from 'mongoose';
import bodyParser from 'body-parser';
import cors from 'cors';
import walletRoutes from './routes/wallet';

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/api/wallets', walletRoutes);

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/flutterwave_wallet', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch((error) => {
    console.log('Error connecting to MongoDB:', error);
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
```

### Step 4: Define Wallet Routes

Create a `src/routes/wallet.ts` file:

```typescript
import express from 'express';
import Wallet from '../models/wallet';

const router = express.Router();

// Create a wallet
router.post('/', async (req, res) => {
    try {
        const newWallet = new Wallet(req.body);
        const savedWallet = await newWallet.save();
        res.status(201).json(savedWallet);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Get all wallets
router.get('/', async (req, res) => {
    try {
        const wallets = await Wallet.find();
        res.status(200).json(wallets);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Get a wallet by ID
router.get('/:id', async (req, res) => {
    try {
        const wallet = await Wallet.findById(req.params.id);
        if (!wallet) return res.status(404).json({ message: 'Wallet not found' });
        res.status(200).json(wallet);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Update a wallet by ID
router.put('/:id', async (req, res) => {
    try {
        const updatedWallet = await Wallet.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedWallet) return res.status(404).json({ message: 'Wallet not found' });
        res.status(200).json(updatedWallet);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Delete a wallet by ID
router.delete('/:id', async (req, res) => {
    try {
        const deletedWallet = await Wallet.findByIdAndDelete(req.params.id);
        if (!deletedWallet) return res.status(404).json({ message: 'Wallet not found' });
        res.status(200).json({ message: 'Wallet deleted' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

export default router;
```

### Step 5: Running the Server

Add a start script in your `package.json`:

```json
"scripts": {
    "start": "tsc && node dist/server.js"
}
```

Now you can start the server:

```bash
npm start
```

### Summary

This setup provides a basic structure for a Node.js Express backend with Mongoose and MongoDB. The `Wallet` model includes a comprehensive set of properties, and the routes cover basic CRUD operations. You can expand this setup by adding more specific business logic, validation, authentication, and other necessary features for your application.
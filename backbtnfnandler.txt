To perform an action when the back button of an Android device is pressed in an Expo React Native component, you can use the `BackHandler` API from `react-native`. This API allows you to listen for hardware back button presses and handle them as needed.

Here's an example of how to use the `BackHandler` to perform an action when the back button is pressed:

1. **Import the necessary modules:**

   ```javascript
   import React, { useEffect } from 'react';
   import { View, Text, StyleSheet, BackHandler, Alert } from 'react-native';
   ```

2. **Create your component:**

   ```javascript
   const App = () => {
     useEffect(() => {
       const backAction = () => {
         Alert.alert('Hold on!', 'Are you sure you want to go back?', [
           {
             text: 'Cancel',
             onPress: () => null,
             style: 'cancel',
           },
           { text: 'YES', onPress: () => BackHandler.exitApp() },
         ]);
         return true;
       };

       const backHandler = BackHandler.addEventListener(
         'hardwareBackPress',
         backAction
       );

       return () => backHandler.remove();
     }, []);

     return (
       <View style={styles.container}>
         <Text>Press the back button to see the alert</Text>
       </View>
     );
   };

   const styles = StyleSheet.create({
     container: {
       flex: 1,
       justifyContent: 'center',
       alignItems: 'center',
       backgroundColor: '#f5fcff',
     },
   });

   export default App;
   ```

### Explanation:

1. **Import the necessary modules:**
   - `BackHandler` from `react-native` is used to listen for hardware back button presses.
   - `Alert` from `react-native` is used to show an alert dialog.

2. **Create your component:**
   - In the `useEffect` hook, you define a `backAction` function that will be called when the back button is pressed.
   - `backAction` shows an alert dialog asking if the user is sure they want to go back. If the user presses "YES," the app will exit using `BackHandler.exitApp()`. If the user presses "Cancel," the alert dialog is dismissed, and no action is taken.
   - `BackHandler.addEventListener` is used to add the `backAction` as the handler for the `hardwareBackPress` event.
   - The `useEffect` hook returns a cleanup function that removes the event listener when the component is unmounted to avoid memory leaks.

With this setup, you can perform any action you want inside the `backAction` function when the back button is pressed. If you want to prevent the app from exiting and only perform a specific action, you can modify the `backAction` function accordingly.